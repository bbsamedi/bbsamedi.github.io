<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透测试总结</title>
      <link href="/2020/07/26/shen-tou-ce-shi-zong-jie/"/>
      <url>/2020/07/26/shen-tou-ce-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="掌控安全Web安全所学总结"><a href="#掌控安全Web安全所学总结" class="headerlink" title="掌控安全Web安全所学总结"></a>掌控安全Web安全所学总结</h1><p>从掌控安全学习web渗透入门，到现在还一直没有总结过所学知识，虽然有写笔记，但是还是觉得知识有些零散，使用起来不是那么得心应手，我想，再把那些知识复习总结一下会好很多。</p><p>持续更新中~</p><p>在这里声明一下，以下知识是按照MySQL数据库和PHP来讲解的，但是原理都一样，其他的数据库和其他的语言出问题的地方也都存在相似之处。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>判断字符串是否符合某一规则（判断是否符合手机号，邮箱规则）</p><p>从一个字符串中找出符合规则的所有字符串（取HTML标签名）</p><h3 id="标识"><a href="#标识" class="headerlink" title="标识"></a>标识</h3><p>PHP中使用正则规则而一定要加代表正则的标识    <strong>/ /</strong></p><h3 id="常用正则函数"><a href="#常用正则函数" class="headerlink" title="常用正则函数"></a>常用正则函数</h3><p>preg_match_all(正则表达式,匹配字符串,匹配到的东西放入数组)</p><p>​    返回匹配到的次数</p><p>preg_replace(正则表达式,替换成什么,匹配字符串)</p><p>​    返回替换后的结果</p><h3 id="常用转义字符"><a href="#常用转义字符" class="headerlink" title="常用转义字符"></a>常用转义字符</h3><p>数字：\d</p><p>非数字：\D</p><p>空白字符(空格、制表符 、换页符等)：\s</p><p>非空白符：\S</p><p>单词字符(26个英文字母+数字+下划线)：\w</p><p>非单词字符：\W</p><h3 id="自定义字符"><a href="#自定义字符" class="headerlink" title="自定义字符"></a>自定义字符</h3><p>字符集合：[单个字符或字符区间]，用于匹配集合内字符</p><p>如：</p><p>​        [a-z]：表示a-z这26个小写字母；</p><p>​        [0-9a-z]：表示0-9和a-z；</p><p>​        [135a-h]：表示包含数字1,3,5和字母a-h这8个字母。</p><p><strong>注意：两个不同字符段之间请勿使用,隔开</strong></p><p>非集：[^单个字符或字符串之间]，用于匹配非集合内字符</p><p>如：</p><p>​        [^0-9]：表示匹配所有非数字字符；</p><p>​        [^a-zA-Z]：表示匹配所有有非字母字符。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>()：代表这是一个整体；</p><p>^：匹配输入字符串的开始位置；</p><p>$：匹配输入字符串的结尾位置；</p><p>.：通配符[代表任意字符] [不匹配换行]；</p><p>*：匹配0次或多次；</p><p>+：匹配1次或多次；</p><p>\：转义字符；</p><p>|：两项之间的一个选择。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>{n}：如0{8}：指只有连起来的8个0才会被匹配；</p><p>{n,}：如0{2,}：指只要有2个0及其以上就匹配；</p><p>{n,m}：如0{2,4}：指最少匹配2个0，最多匹配4个0。</p><p><strong>注意：被匹配时，默认匹配最多的次数</strong></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>/i:不区分大小写；</p><p>/A：匹配规则必须从头开始匹配；</p><p>/s：将匹配一切字符；</p><p>/x：正则表达式中的空白字符会被忽略。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="信息收集收集什么？"><a href="#信息收集收集什么？" class="headerlink" title="信息收集收集什么？"></a>信息收集收集什么？</h3><ol><li>whois信息</li></ol><p>whois指的是域名注册时留下的信息，比如留下管理员的名字、电话号码、邮箱。</p><ol start="2"><li>子域名（包括具有功能的IP）</li></ol><p>顶级域名下的二级域名或者三级甚至更多级的域名都属于子域名</p><p>子域名可以扩大攻击范围，同一域名下的二级域名都属于相同资产，一般而言都有相关的联系。</p><ol start="3"><li>端口探测</li></ol><p>有些危险端口开放了我们就可以尝试入侵，例如445|3306|22|1433|6379 可以尝试爆破或者是使用某些存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的web网站~ </p><p>常用工具为Nmap。</p><ol start="4"><li>旁站（同ip网站）</li></ol><p>旁站指的是在同一ip上面的多个网站，如果你成功拿下旁站，运气好和主站在同一台机器上，是不是就拿到了主站？入伙运气不好是一个内网，我我们是不是可以尝试内网渗透？</p><ol start="5"><li>C段 </li></ol><p>例如192.168.1.1，那么192.168.1.1-192.168.1.255都属于同一C段，有些学校或者大公司，他们会持有整个IP段，这个ip 段中所有的ip都是那个公司的资产，拿下一台可能有用的信息，可能在同一内网。</p><ol start="6"><li>目录扫描</li></ol><p>有些网站可能某个目录下是一个新的网站，有的时候目录扫描直接下载了压缩包遇难、编辑器目录、一些废弃的页面（会报错）。</p><p>常用工具为御剑。</p><ol start="7"><li>指纹识别</li></ol><p>cms可能存在通杀漏洞，如果使用了CMS建站我们可以用通杀漏洞直接攻击。</p><ol start="8"><li>内容敏感信息泄露（google hacking）</li></ol><p>尝试Google语法，站到 某些敏感内容，比如包含身份证号码的表格、包含服务器账号密码的文件、某些敏感文件、备份数据库。</p><p>还有一种网络空间搜索引擎的东西，基于物联网搜索，搜索联网的网络设备，例如：钟馗之眼、Shodan、fofa。</p><p>通过网络空间搜索引擎，我们能够找到开放的服务以及在线的网络设备</p><h3 id="信息收集的方法"><a href="#信息收集的方法" class="headerlink" title="信息收集的方法"></a>信息收集的方法</h3><ol><li>whois信息</li></ol><p>站长工具查询：whois.chinaz.com</p><p>国外查询：whois.com</p><ol start="2"><li>端口</li></ol><p>nmap -o 192.168.1.1(kali自带nmap)</p><p>还有一种在线扫描网站：<a href="https://www.atool99.com/port_scanner.php" target="_blank" rel="noopener">https://www.atool99.com/port_scanner.php</a></p><ol start="3"><li>旁站</li></ol><p>站长工具查询：s.tool.chinaz.com/same</p><p>​                            phpinfo.me/bing.php</p><ol start="4"><li>C段</li></ol><p>确定ip的范围，然后对端内的ip主机进行信息收集</p><ol start="5"><li>目录扫描</li></ol><p>可以使用御剑等工具进行扫描（查看robots.txt信息）</p><ol start="6"><li>指纹识别</li></ol><p>云悉、微步社区</p><ol start="7"><li>内容敏感信息泄露</li></ol><p>各种包含敏感信息的东西（google语法）</p><p>不翻墙的可以使用镜像站：</p><p>c.g456.top</p><p>gm1.xueyanren.com</p><p>hp.myway.com/myway/index.html</p><p>fireball.com</p><ol start="8"><li>子域名</li></ol><p>通过google  hack语法进行查询（爬取搜索引擎）</p><p>通过某些平台（微步社区 云悉）</p><p>使用工具爆破DNS服务器（SubBrute、Knockpy  github有下载） 泛解析（没有设置过的解析）</p><p>网页内蜘蛛爬虫    </p><h3 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h3><table><thead><tr><th>关键字</th><th>功能</th></tr></thead><tbody><tr><td>“”</td><td>双引号内的内容不可拆分</td></tr><tr><td>site:</td><td>指定域名</td></tr><tr><td>inurl:</td><td>url存在关键字的网页</td></tr><tr><td>intext</td><td>网页正文中的关键字</td></tr><tr><td>filetype</td><td>指定文件类型</td></tr><tr><td>intitle</td><td>网页标题中的关键字</td></tr><tr><td>link</td><td>link:baidu.com  表示所有和biadu.com做了连接的url</td></tr><tr><td>info</td><td>查找指定站点的一些基本信息</td></tr></tbody></table><p>这里只是列举出一些简单的用法，详细的谷歌语法百度就可以学到</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h4 id="端口状态："><a href="#端口状态：" class="headerlink" title="端口状态："></a>端口状态：</h4><p>在信息收集中，目标副武器的端口状态也是我们要留意的</p><p>open(开放的)</p><p>close(关闭的)</p><p>Filtered(被过滤的)</p><p>unfiltered(未被过滤的)</p><p>open|filtered(开放或被过滤的)</p><p>closed|filtered(关闭或被过滤的)</p><h4 id="查端口方法："><a href="#查端口方法：" class="headerlink" title="查端口方法："></a>查端口方法：</h4><p>​    nmap -p  80,22   url/ip                自定义想要扫描的端口</p><p>​    nmap -P  1-255    url/ip                自定义端口范围</p><p>​    nmap  -r    url/ip                            随机扫描端口</p><h4 id="端口类型："><a href="#端口类型：" class="headerlink" title="端口类型："></a>端口类型：</h4><p>周知端口：0-1023</p><p>动态端口：49152-65535</p><p>注册端口：1024-49151</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>子域名的挖掘的意义在于扩大资产，渗透测试的话很可能测试一个域名，自住哪也都是测试范围，我们可以从子站中获得信息，或者拿到子站权限，对主网进行内网渗透。</p><p>对于一些网站，他的主站采用CDN加速，但是他的子站可能没有，因此，也可以从子站查询真实ip</p><p>whois查询到的信息可用来社工或者根据邮箱手机号进行密码组合用以爆破</p><p>目标的真实ip也许会对我们的渗透测试提供很多便利</p><h2 id="SQL注入原理分析"><a href="#SQL注入原理分析" class="headerlink" title="SQL注入原理分析"></a>SQL注入原理分析</h2><h3 id="注入的本质："><a href="#注入的本质：" class="headerlink" title="注入的本质："></a>注入的本质：</h3><p>把用户输入的数据当作代码执行。</p><p>这里要满足两个条件：</p><ol><li><p>用户能控制输入</p></li><li><p>原本程序要执行的代码，拼接了用户输入的数据然后进行执行</p></li></ol><h3 id="显错注入——联合查询："><a href="#显错注入——联合查询：" class="headerlink" title="显错注入——联合查询："></a>显错注入——联合查询：</h3><h4 id="1、判断注入点"><a href="#1、判断注入点" class="headerlink" title="1、判断注入点"></a>1、判断注入点</h4><p>最古老的方法：</p><p>​        and 1=1   页面显示正常</p><p>​        and 1=2    页面显示不正常</p><p>最简单的方法：</p><p>​        传参后面加’，看是否报错</p><p>若为数字型传参，可以用-1</p><p>例如：</p><p><a href="http://www.xxx.com/new.php?id=1" target="_blank" rel="noopener">http://www.xxx.com/new.php?id=1</a>            页面显示id=1的新闻</p><p><a href="http://www.xxx.com/new.php?id=2-1" target="_blank" rel="noopener">http://www.xxx.com/new.php?id=2-1</a>        页面显示id=1的新闻</p><p>只要发生上面的这些情况的，就是存在SQL注入漏洞。</p><p>一般来说and 1=1和and 1=2被拦截的可能性太高了，可以尝试一下and -1=-1;and -1=-2;and 1&gt;0 or 1=1</p><p>或者直接尝试or sleep(5)            让页面延迟5秒显示</p><p><strong>其目的就是为了判断我们输入的东西是否被当做了代码来执行了</strong>。</p><h4 id="2、判断字段数"><a href="#2、判断字段数" class="headerlink" title="2、判断字段数"></a>2、判断字段数</h4><p>如何知道表里面的字段数，就用:</p><p>order    by    1        以第1个字段进行排序</p><p>order    by    2        以第2个字段进行排序</p><p>……</p><p>例如，当order    by    3    输进去之后，页面显示不正常了，那么显示这个页面的这张表就只有两个字段。</p><h4 id="3、判断输出点"><a href="#3、判断输出点" class="headerlink" title="3、判断输出点"></a>3、判断输出点</h4><p>select    1,2            输出第1和第2个字段</p><p>这个就是用来判断在这个页面中存在sql注入的显错点在哪，只有找到了显错点，我们才能从显错点来获取数据库表中的数据。</p><p>这里假如2是输出点，那我们就可以用database()这个函数来获取数据库的库名</p><pre><code>select    1,database()</code></pre><br><p>获取数据库常规写法：</p><p>​    select    字段名    from    表名    where    条件</p><p>那么我们知道了库名之后，要怎么获取字段名和表名呢，这里有两个方法</p><p>①.猜，常用的字段名和表名</p><p>②.在mysql中高于5.0版本的有一个系统自带库information_schema，这个库中有两张表，分别是：</p><p><strong>information_schema.tables</strong>                存放表名和库的对应的表</p><p><strong>information_schema.columns</strong>            存放字段名和表名的对应</p><h4 id="4、去系统自带库的表中查表名、字段名"><a href="#4、去系统自带库的表中查表名、字段名" class="headerlink" title="4、去系统自带库的表中查表名、字段名"></a>4、去系统自带库的表中查表名、字段名</h4><p>查表名，例：</p><pre><code>url    and    1=2    union    select    1,table_name    from    infomation_schema.tables    where    table_schema=database()    limit    0,1</code></pre><p>用limit    0,1；limit    1,1;limit    2,1 这样来一个一个的显示表名</p><p>查字段名，例：</p><pre><code>url    and    1=2    union    select    1,column_name    from    information_schema.columns    where        table_schema=database()    and    table_name='刚刚查到的表名'    limit    0,1</code></pre><p>这里也同样用limit    1,1    2,1来着查看字段名</p><br><p>遇到字符型传参，如id=1’1’</p><p>加上’%23或者’–+</p><p>其主要目的就是闭合单引号，当然也有可能别人用的是双引号，这个要自己尝试，因为他不会显示出来</p><p>出现小括号也是一样的，如id=(‘1’)</p><p>用’)来闭合它，再加上%23或者–+来闭合</p><br><p>最后，查到了我们想要的表名和字段名,就可以一个个查字段中的数据了</p><pre><code>union    select        1,字段名    from    表名    limit 0,1</code></pre><h2 id="渗透测试常用工具"><a href="#渗透测试常用工具" class="headerlink" title="渗透测试常用工具"></a>渗透测试常用工具</h2><h3 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h3><p>安装python2.7.16环境，设置环境变量：此电脑右键-&gt;属性-&gt;高级系统设置-&gt;高级-&gt;环境变量-&gt;path-&gt;编辑-&gt;新建-&gt;将python的安装路径加进去。</p><p>在安装sqlmap的文件夹里cmd，然后python  sqlmap.py就可以使用了</p><br><p>sqlmap基础命令：</p><p>-u：指定注入点（url）</p><p>-dbs：跑库名</p><p>–tables：跑表名</p><p>–columns：跑字段名</p><p>–dump：枚举数据</p><p>-D：指定库</p><p>-T：指定表</p><p>-C：指定字段</p><p>–random-agent：选择随机的user-agents头</p><p>–delay=1：每次探测延时1秒（防止访问过快被ban）</p><p>–count：查看数据量</p><p>–proxy  “<a href="http://127.0.0.1:1080&quot;：使用本地1080端口" target="_blank" rel="noopener">http://127.0.0.1:1080"：使用本地1080端口</a></p><p>–level   1-5：测试等级（最低1，最高5），level等级越高检测越详细，例如：level 2会检测cookie注入，大于3检测头注入</p><p>–is-dba：查询当前用户权限，如果dba是True可以尝试直接拿webshell</p><p>–os-shell：尝试往网站中放热一个cmd  shell（就是拥有cmd权限的shell），先选择写入shell的脚本语言，有的需要填写网站的web目录的绝对路径，有的可以直接选择好的shell的脚本语言类型就可以拿shell。</p><h3 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h3><p>首先安装java环境</p><p>原理：中间人工具</p><p>谷歌浏览器插件安装方法：</p><p>把proxy swithchysharp.crx文件改为zip文件，解压到一个文件夹内，然后拖入浏览器的扩展程序页面中</p><p>点浏览器右上角出现的小地球，点选项，情节模式名称随便起一个名字，http代理设置为127.0.0.1，8080，不代理的地址删掉，保存即可</p><p>要抓包，就打开代理，然后打开burp就可以了</p><h2 id="POST注入与Head注入"><a href="#POST注入与Head注入" class="headerlink" title="POST注入与Head注入"></a>POST注入与Head注入</h2><h3 id="POST注入"><a href="#POST注入" class="headerlink" title="POST注入"></a>POST注入</h3><p>post注入就是在一些登录框、查询框等各种和数据库有交互的框中进行的注入</p><p>get传参是通过”?”来标识的，get传参会经过url编码，数据量有限，比较少</p><p>post传参的数据可以比较大，post注入本质和get注入无区别</p><br><p>一般我们会先尝试万能密码：admin或123465或’ or 1=1 #</p><p>假如我们直接在要输入账号的框中输入a’ or 1=1，然后用burp抓包查看的话，我们很有可能看到类似于这样的语句</p><pre><code>select from user where username='a' or 1=1 #' and password=''</code></pre><p>常规的post注入就是</p><pre><code>a' or 1=1 order by 1a' union select 1,2,3#a' union select 1,2,database()#</code></pre><p>然后其他的就跟get注入一模一样</p><p>如果#被过滤，就用–+/– qwe，还被过滤就用\*</p><br><p>用sqlmap跑post注入</p><pre><code>python sqlmap.py -u url --form</code></pre><p>也可以用burp抓一个包，然后复制下来，放在sqlmap工具的文件夹下的1.txt文件中，在username=……后面加上*，password=…后面也可以加，sqlmap就会自动替换username和password的字段的内容</p><pre><code>python sqlmap.py -r 1.txt --level 3</code></pre><h3 id="Head注入"><a href="#Head注入" class="headerlink" title="Head注入"></a>Head注入</h3><p>PHP全局变量——超全局变量</p><p>HTTP开头的传参量都是可以有我们自己决定的，甚至可以在包中输入自己的东西</p><p>有获取就很容易有存储</p><p>我们想一下insert into () [插入页面会不会有输出]</p><p>我们可以通过两种方法来做：盲注和报错注入</p><p>这里我们用报错注入来讲</p><br><p>致命性报错：</p><p>​    updatexml()：更新xml文档的函数</p><p>​        语法：updatexml(目标xml内容，xml文档路径，更新的内容)</p><p>​        例：</p><pre><code>updatexml(123,concat('~',(select database())),123)</code></pre><p>concat()：拼接字符串</p><p>如果不行，也可以尝试下用0x7e代替~，因为数据库是支持16进制的，而且通常单引号会被过滤</p><br><p>既然head注入是用在请求头中的，那么我们就用burp抓一个包，然后在数据包里的一些请求头中假如上面的注入语句</p><p>例如在User-Agent的数据后面加上</p><pre><code>'or updatexml(1,concat(0x7e,(select database())),1),1)#</code></pre><p>用and的时候，前面的错了，则后面的不执行；前面的对了，则后面的执行；</p><p>用or的时候，前面的对了，则后面的不执行；前面的错了，则后面的执行；</p><p>所以，如果用or不行，就换and。</p><p>报错注入要一个字段一个字段的拿</p><h2 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>盲注就是服务器无回显的时候完成的注入攻击</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>盲注分为布尔盲注和时间盲注，</p><p>布尔盲注就是True和Flase；</p><p>时间盲注就是页面返回值只有一种，true，无论输入任何值，返回情况都会按照正常的来处理。</p><h3 id="需要认识的函数"><a href="#需要认识的函数" class="headerlink" title="需要认识的函数"></a>需要认识的函数</h3><p>length()：返回字符串的长度；</p><p>substr()：截取字符串；（语法    substr(str,pos,len);    pos代表从哪里开始截取）</p><p>ascii()：返回字符串的ascii码;；</p><p>sleep()：将程序挂起n秒；</p><p>if(exp1,exp2,exp3)：判断语句，如果第一个语句正确就执行第二个语句，如果错误则执行第三个语句。</p> <br><p>示例：</p><pre><code>and length(database())&gt;12 #如果页面正常，则数据库名有12个字符and substr(database(),1,1)=1 #可以用burp进行爆破，替换a，显示正常则字符正确，第一个正确了，就测试第二个，然后第三个......and ascii(substr(database(),1,1))&gt;100 #用字符的ASCII码来缩小查找范围ascii(substr((select table_name from information_schema.tables=database( limit 0,1),1,1)))=102 #    更换1,1中的前面的那个1和102来判断表名</code></pre><p>数据库名、表名、字段名都可以按照这个方法来判断</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>magic_quotes_gpc：魔术引号开关，在php中的作用是判断用户提交的数据，如包含有：post、get、cookie、过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符引起的污染，而出现致命的错误。</p><p>出现魔术引号的时候，会经过PHP处理出现’或者”或者\导致我们输入的东西无法闭合</p><p>这时候我们就需要寻找不需要闭合的注入点或者使用宽字节注入</p><br><p>这里我们要知道一个编码格式：GBK编码，是一种多字符编码，双字节编码</p><p>而且，当汉字是GBK编码的时候是两个字节，是UTF-8表面的的时候是3个字节。</p><p>我们可以用汉子来吧魔术引号的\屏蔽掉，相当于是一种绕过</p><p>当我们遇到的是GET传参的时候，就用GBK编码来代表汉字，例</p><pre><code>id=1 %5d%5c' union select 1,2,3 -- qwe假如说我们这个时候已经获取了数据库名，那么就将数据库名转换为16进制数id=1 %5d%5c' union select 1,2,table_name from information_schema tables where table_shcema=0x76738572因为MySQL是支持十六进制的，我们如果直接输入数据库名的话，要加单引号，而单引号会被魔术引号注释掉，导致失效，而直接用database()来代替数据库名可能会出错</code></pre><p>当我们遇到是POST传参的时候，直接输入汉字进行绕过即可，其余与GET传参无异</p><p>同时也可以</p><pre><code>a') or 1=1 -- qwe也可以用burp在hex中把a所代表的那个十六进制改成df来进行绕过</code></pre><h2 id="Access注入——cookie注入"><a href="#Access注入——cookie注入" class="headerlink" title="Access注入——cookie注入"></a>Access注入——cookie注入</h2><h3 id="什么是Cookie？"><a href="#什么是Cookie？" class="headerlink" title="什么是Cookie？"></a>什么是Cookie？</h3><p>cookie就是代表你身份的一串字符串，网站根据Cookie来识别你是谁，如果你获取了管理员的Cookie，你可以无需密码直接登录管理员账号。</p><h3 id="为什么Cookie和注入擦出火花？"><a href="#为什么Cookie和注入擦出火花？" class="headerlink" title="为什么Cookie和注入擦出火花？"></a>为什么Cookie和注入擦出火花？</h3><p>在动态语言中存在超全局变量可以获取多种传参方式，很多时候开发在开发的时候为了考虑到多种接收参数，在接收参数的时候都用多种解释传参的方式。</p><p>例如：php中的$_REQUEST可以获取POST|GET|COOKIE传参</p><p><strong>php5.4以上版本不接受Cookie传参</strong></p><br><p>Cookie注入不仅仅存在于Access数据库中，其他数据库中也有；</p><p><strong>Cookie注入是在POST，GET传参被拦截的情况下所使用的</strong></p><h3 id="实现Cookie注入要满足的条件："><a href="#实现Cookie注入要满足的条件：" class="headerlink" title="实现Cookie注入要满足的条件："></a>实现Cookie注入要满足的条件：</h3><p>1、注入满足的条件；</p><p>2、网站会获取Cookie传参，然后和原有的SQL语句拼接再传入数据库。</p><h3 id="设置Cookie的方法："><a href="#设置Cookie的方法：" class="headerlink" title="设置Cookie的方法："></a>设置Cookie的方法：</h3><h4 id="一、用Burp"><a href="#一、用Burp" class="headerlink" title="一、用Burp"></a>一、用Burp</h4><p>找到包中Cookie传参的那一行，在Cookie中的数据后面加上分号，然后进行传参</p><p>例：我们抓取了一个网站的新闻页面的包，id传参为171，将url栏中的?id=171去掉，然后Cookie:……….; id=171</p><h4 id="二、浏览器插件EditCookie"><a href="#二、浏览器插件EditCookie" class="headerlink" title="二、浏览器插件EditCookie"></a>二、浏览器插件EditCookie</h4><p><strong>Cookie的传参会进行url解码，所以传参的时候不要忘记进行url编码</strong></p><p>其次Cookie注入和sql注入没有区别</p><p>查询Access数据库必须要带表名，而且Access数据库没有系统自带库，所以就要强行蔡姐来猜测表名</p><pre><code>and exists(select *from 表名)        #不要忘记进行url编码</code></pre><p>这段代码可以判断数据库中是否存在此表，显示正常则代表存在。</p><p>我们可以用burp来爆破表名</p><p>假如我们已经获得了表名为admin，并且判断出表中有三个字段</p><p>那么就要判断输出点，用EditCookie新建一个cookie，命名为id，内容为</p><pre><code>171 union select 1,2,3 from admin        #不要忘记进行url编码</code></pre><p>判断完输出点，这个时候我们就要得到字段名来获得数据，这里有两个方法获取字段名：①、强猜；②、偏移注入</p><p>偏移注入后面就会讲，这里用强猜，常用的字段名都可以尝试，例如username;password;id…….</p><pre><code>171 union select 1,username,3 from admin        #不要忘记进行url编码171 union select 1,password,3 from admin</code></pre><h4 id="三、用js设置Cookie"><a href="#三、用js设置Cookie" class="headerlink" title="三、用js设置Cookie"></a>三、用js设置Cookie</h4><p>F12打开Console，我们用浏览器的控制台的时候记得要把插件关掉</p><p>用js来进行SQL注入的话我们就不需要进行url编码了</p><p>进入Console后直接输入</p><pre><code>document.cookie="id="+escape("171 order by 1")</code></pre><p>记得要把URL栏中的?id=171删掉，只要替换括号内的语句就可以了</p><br><p>我们用SQLmap跑cookie注入的时候</p><pre><code>python sqlmap.py -u .......?id=171(这个?id=171记得要删掉) --cookie "id=171" --level 2</code></pre><p>Cookie注入一般在ASP站中容易遇到，因为这样的站都是一些老网站，都用的是Access数据库。</p><h2 id="Access注入——偏移注入"><a href="#Access注入——偏移注入" class="headerlink" title="Access注入——偏移注入"></a>Access注入——偏移注入</h2><h3 id="偏移注入使用场景："><a href="#偏移注入使用场景：" class="headerlink" title="偏移注入使用场景："></a>偏移注入使用场景：</h3><p>在知道表名但不知道字段名的情况下查询数据，搭配cookie注入</p><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p><em>：在数据库中\</em>代表一切</p><p>库.表：表示选中这个库里面这个表</p><p>admin.*：代表admin表中所有字段</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="C:%5CUsers%5Csamedi%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200803083651627.png" alt="image-20200803083651627"></p><br><p>假如我们要注入的这个页面，用order by 查到显示这个页面的表中有10个字段，然后知道了有一个叫admin的表，如果这个admin表中有2个字段，那么就要用</p><pre><code>union select 1,admin.*,4,5,6,7,8,9,10 from admin</code></pre><p>假设admin表中有7个字段=&gt;a,b,c,d,e,f,g</p><pre><code>union select 1,2,3,4,5,6,7,8,9,10 from admin        #正常这样判断显错位union select 1,2,3,admin.* from admin            等价于↓union select 1,2,3,a,b,c,d,e,f,g from admin</code></pre><p>至于admin表中到底有多少个字段就要靠自己慢慢地尝试</p><p>再假设我们判断出来的显错位为4,5,6，那么</p><pre><code>select 1,2,3,admin* from admin        #可以获得a,b,cselect 1,2,admin* from admin        #可以获得b,c,dselect 1,admin*,9,10 from admin        #可以获得c,d,eselect admin.*,8,9,10 from admin    #可以获得d,e,f</code></pre><p>偏移注入就是有这样的局限性，因为显错位不够，导致g无法显示了，如果原本要查询的这个页面的数据库中的表的字段越多，显示位越多，偏移注入就越多，当然可能并不是所有的字段内容都是对我们有用的。</p><p>有的显错位并不一定那么明显的显示在页面中，有可能在这个页面的图片中的html源码里</p><p>偏移注入用sqlmap是跑不出来的，所以遇到了还是自己手注的好</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/24/hello-word/"/>
      <url>/2020/07/24/hello-word/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
