<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透测试总结</title>
      <link href="/2020/07/26/shen-tou-ce-shi-zong-jie/"/>
      <url>/2020/07/26/shen-tou-ce-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="掌控安全Web安全所学总结"><a href="#掌控安全Web安全所学总结" class="headerlink" title="掌控安全Web安全所学总结"></a>掌控安全Web安全所学总结</h1><p>从掌控安全学习web渗透入门，到现在还一直没有总结过所学知识，虽然有写笔记，但是还是觉得知识有些零散，使用起来不是那么得心应手，我想，再把那些知识复习总结一下会好很多。</p><p>持续更新中~</p><p>在这里声明一下，以下知识是按照MySQL数据库和PHP来讲解的，但是原理都一样，其他的数据库和其他的语言出问题的地方也都存在相似之处。</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>判断字符串是否符合某一规则（判断是否符合手机号，邮箱规则）</p><p>从一个字符串中找出符合规则的所有字符串（取HTML标签名）</p><h3 id="标识"><a href="#标识" class="headerlink" title="标识"></a>标识</h3><p>PHP中使用正则规则而一定要加代表正则的标识    <strong>/ /</strong></p><h3 id="常用正则函数"><a href="#常用正则函数" class="headerlink" title="常用正则函数"></a>常用正则函数</h3><p>preg_match_all(正则表达式,匹配字符串,匹配到的东西放入数组)</p><p>​    返回匹配到的次数</p><p>preg_replace(正则表达式,替换成什么,匹配字符串)</p><p>​    返回替换后的结果</p><h3 id="常用转义字符"><a href="#常用转义字符" class="headerlink" title="常用转义字符"></a>常用转义字符</h3><p>数字：\d</p><p>非数字：\D</p><p>空白字符(空格、制表符 、换页符等)：\s</p><p>非空白符：\S</p><p>单词字符(26个英文字母+数字+下划线)：\w</p><p>非单词字符：\W</p><h3 id="自定义字符"><a href="#自定义字符" class="headerlink" title="自定义字符"></a>自定义字符</h3><p>字符集合：[单个字符或字符区间]，用于匹配集合内字符</p><p>如：</p><p>​        [a-z]：表示a-z这26个小写字母；</p><p>​        [0-9a-z]：表示0-9和a-z；</p><p>​        [135a-h]：表示包含数字1,3,5和字母a-h这8个字母。</p><p><strong>注意：两个不同字符段之间请勿使用,隔开</strong></p><p>非集：[^单个字符或字符串之间]，用于匹配非集合内字符</p><p>如：</p><p>​        [^0-9]：表示匹配所有非数字字符；</p><p>​        [^a-zA-Z]：表示匹配所有有非字母字符。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>()：代表这是一个整体；</p><p>^：匹配输入字符串的开始位置；</p><p>$：匹配输入字符串的结尾位置；</p><p>.：通配符[代表任意字符] [不匹配换行]；</p><p>*：匹配0次或多次；</p><p>+：匹配1次或多次；</p><p>\：转义字符；</p><p>|：两项之间的一个选择。</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>{n}：如0{8}：指只有连起来的8个0才会被匹配；</p><p>{n,}：如0{2,}：指只要有2个0及其以上就匹配；</p><p>{n,m}：如0{2,4}：指最少匹配2个0，最多匹配4个0。</p><p><strong>注意：被匹配时，默认匹配最多的次数</strong></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>/i:不区分大小写；</p><p>/A：匹配规则必须从头开始匹配；</p><p>/s：将匹配一切字符；</p><p>/x：正则表达式中的空白字符会被忽略。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="信息收集收集什么？"><a href="#信息收集收集什么？" class="headerlink" title="信息收集收集什么？"></a>信息收集收集什么？</h3><ol><li>whois信息</li></ol><p>whois指的是域名注册时留下的信息，比如留下管理员的名字、电话号码、邮箱。</p><ol start="2"><li>子域名（包括具有功能的IP）</li></ol><p>顶级域名下的二级域名或者三级甚至更多级的域名都属于子域名</p><p>子域名可以扩大攻击范围，同一域名下的二级域名都属于相同资产，一般而言都有相关的联系。</p><ol start="3"><li>端口探测</li></ol><p>有些危险端口开放了我们就可以尝试入侵，例如445|3306|22|1433|6379 可以尝试爆破或者是使用某些存在漏洞的服务。而且有可能一台服务器上面不同端口代表着不同的web网站~ </p><p>常用工具为Nmap。</p><ol start="4"><li>旁站（同ip网站）</li></ol><p>旁站指的是在同一ip上面的多个网站，如果你成功拿下旁站，运气好和主站在同一台机器上，是不是就拿到了主站？入伙运气不好是一个内网，我我们是不是可以尝试内网渗透？</p><ol start="5"><li>C段 </li></ol><p>例如192.168.1.1，那么192.168.1.1-192.168.1.255都属于同一C段，有些学校或者大公司，他们会持有整个IP段，这个ip 段中所有的ip都是那个公司的资产，拿下一台可能有用的信息，可能在同一内网。</p><ol start="6"><li>目录扫描</li></ol><p>有些网站可能某个目录下是一个新的网站，有的时候目录扫描直接下载了压缩包遇难、编辑器目录、一些废弃的页面（会报错）。</p><p>常用工具为御剑。</p><ol start="7"><li>指纹识别</li></ol><p>cms可能存在通杀漏洞，如果使用了CMS建站我们可以用通杀漏洞直接攻击。</p><ol start="8"><li>内容敏感信息泄露（google hacking）</li></ol><p>尝试Google语法，站到 某些敏感内容，比如包含身份证号码的表格、包含服务器账号密码的文件、某些敏感文件、备份数据库。</p><p>还有一种网络空间搜索引擎的东西，基于物联网搜索，搜索联网的网络设备，例如：钟馗之眼、Shodan、fofa。</p><p>通过网络空间搜索引擎，我们能够找到开放的服务以及在线的网络设备</p><h3 id="信息收集的方法"><a href="#信息收集的方法" class="headerlink" title="信息收集的方法"></a>信息收集的方法</h3><ol><li>whois信息</li></ol><p>站长工具查询：whois.chinaz.com</p><p>国外查询：whois.com</p><ol start="2"><li>端口</li></ol><p>nmap -o 192.168.1.1(kali自带nmap)</p><p>还有一种在线扫描网站：<a href="https://www.atool99.com/port_scanner.php" target="_blank" rel="noopener">https://www.atool99.com/port_scanner.php</a></p><ol start="3"><li>旁站</li></ol><p>站长工具查询：s.tool.chinaz.com/same</p><p>​                            phpinfo.me/bing.php</p><ol start="4"><li>C段</li></ol><p>确定ip的范围，然后对端内的ip主机进行信息收集</p><ol start="5"><li>目录扫描</li></ol><p>可以使用御剑等工具进行扫描（查看robots.txt信息）</p><ol start="6"><li>指纹识别</li></ol><p>云悉、微步社区</p><ol start="7"><li>内容敏感信息泄露</li></ol><p>各种包含敏感信息的东西（google语法）</p><p>不翻墙的可以使用镜像站：</p><p>c.g456.top</p><p>gm1.xueyanren.com</p><p>hp.myway.com/myway/index.html</p><p>fireball.com</p><ol start="8"><li>子域名</li></ol><p>通过google  hack语法进行查询（爬取搜索引擎）</p><p>通过某些平台（微步社区 云悉）</p><p>使用工具爆破DNS服务器（SubBrute、Knockpy  github有下载） 泛解析（没有设置过的解析）</p><p>网页内蜘蛛爬虫    </p><h3 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h3><table><thead><tr><th>关键字</th><th>功能</th></tr></thead><tbody><tr><td>“”</td><td>双引号内的内容不可拆分</td></tr><tr><td>site:</td><td>指定域名</td></tr><tr><td>inurl:</td><td>url存在关键字的网页</td></tr><tr><td>intext</td><td>网页正文中的关键字</td></tr><tr><td>filetype</td><td>指定文件类型</td></tr><tr><td>intitle</td><td>网页标题中的关键字</td></tr><tr><td>link</td><td>link:baidu.com  表示所有和biadu.com做了连接的url</td></tr><tr><td>info</td><td>查找指定站点的一些基本信息</td></tr></tbody></table><p>这里只是列举出一些简单的用法，详细的谷歌语法百度就可以学到</p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><h4 id="端口状态："><a href="#端口状态：" class="headerlink" title="端口状态："></a>端口状态：</h4><p>在信息收集中，目标副武器的端口状态也是我们要留意的</p><p>open(开放的)</p><p>close(关闭的)</p><p>Filtered(被过滤的)</p><p>unfiltered(未被过滤的)</p><p>open|filtered(开放或被过滤的)</p><p>closed|filtered(关闭或被过滤的)</p><h4 id="查端口方法："><a href="#查端口方法：" class="headerlink" title="查端口方法："></a>查端口方法：</h4><p>​    nmap -p  80,22   url/ip                自定义想要扫描的端口</p><p>​    nmap -P  1-255    url/ip                自定义端口范围</p><p>​    nmap  -r    url/ip                            随机扫描端口</p><h4 id="端口类型："><a href="#端口类型：" class="headerlink" title="端口类型："></a>端口类型：</h4><p>周知端口：0-1023</p><p>动态端口：49152-65535</p><p>注册端口：1024-49151</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>子域名的挖掘的意义在于扩大资产，渗透测试的话很可能测试一个域名，自住哪也都是测试范围，我们可以从子站中获得信息，或者拿到子站权限，对主网进行内网渗透。</p><p>对于一些网站，他的主站采用CDN加速，但是他的子站可能没有，因此，也可以从子站查询真实ip</p><p>whois查询到的信息可用来社工或者根据邮箱手机号进行密码组合用以爆破</p><p>目标的真实ip也许会对我们的渗透测试提供很多便利</p><h2 id="SQL注入原理分析"><a href="#SQL注入原理分析" class="headerlink" title="SQL注入原理分析"></a>SQL注入原理分析</h2><h3 id="注入的本质："><a href="#注入的本质：" class="headerlink" title="注入的本质："></a>注入的本质：</h3><p>把用户输入的数据当作代码执行。</p><p>这里要满足两个条件：</p><ol><li><p>用户能控制输入</p></li><li><p>原本程序要执行的代码，拼接了用户输入的数据然后进行执行</p></li></ol><h3 id="显错注入——联合查询："><a href="#显错注入——联合查询：" class="headerlink" title="显错注入——联合查询："></a>显错注入——联合查询：</h3><h4 id="1、判断注入点"><a href="#1、判断注入点" class="headerlink" title="1、判断注入点"></a>1、判断注入点</h4><p>最古老的方法：</p><p>​        and 1=1   页面显示正常</p><p>​        and 1=2    页面显示不正常</p><p>最简单的方法：</p><p>​        传参后面加’，看是否报错</p><p>若为数字型传参，可以用-1</p><p>例如：</p><p><a href="http://www.xxx.com/new.php?id=1" target="_blank" rel="noopener">http://www.xxx.com/new.php?id=1</a>            页面显示id=1的新闻</p><p><a href="http://www.xxx.com/new.php?id=2-1" target="_blank" rel="noopener">http://www.xxx.com/new.php?id=2-1</a>        页面显示id=1的新闻</p><p>只要发生上面的这些情况的，就是存在SQL注入漏洞。</p><p>一般来说and 1=1和and 1=2被拦截的可能性太高了，可以尝试一下and -1=-1;and -1=-2;and 1&gt;0 or 1=1</p><p>或者直接尝试or sleep(5)            让页面延迟5秒显示</p><p><strong>其目的就是为了判断我们输入的东西是否被当做了代码来执行了</strong>。</p><h4 id="2、判断字段数"><a href="#2、判断字段数" class="headerlink" title="2、判断字段数"></a>2、判断字段数</h4><p>如何知道表里面的字段数，就用:</p><p>order    by    1        以第1个字段进行排序</p><p>order    by    2        以第2个字段进行排序</p><p>……</p><p>例如，当order    by    3    输进去之后，页面显示不正常了，那么显示这个页面的这张表就只有两个字段。</p><h4 id="3、判断输出点"><a href="#3、判断输出点" class="headerlink" title="3、判断输出点"></a>3、判断输出点</h4><p>select    1,2            输出第1和第2个字段</p><p>这个就是用来判断在这个页面中存在sql注入的显错点在哪，只有找到了显错点，我们才能从显错点来获取数据库表中的数据。</p><p>这里假如2是输出点，那我们就可以用database()这个函数来获取数据库的库名</p><p>select    1,database()</p><br><p>获取数据库常规写法：</p><p>​    select    字段名    from    表名    where    条件</p><p>那么我们知道了库名之后，要怎么获取字段名和表名呢，这里有两个方法</p><p>①.猜，常用的字段名和表名</p><p>②.在mysql中高于5.0版本的有一个系统自带库information_schema，这个库中有两张表，分别是：</p><p><strong>information_schema.tables</strong>                存放表名和库的对应的表</p><p><strong>information_schema.columns</strong>            存放字段名和表名的对应</p><h4 id="4、去系统自带库的表中查表名、字段名"><a href="#4、去系统自带库的表中查表名、字段名" class="headerlink" title="4、去系统自带库的表中查表名、字段名"></a>4、去系统自带库的表中查表名、字段名</h4><p>查表名，例：</p><p>url    and    1=2    union    select    1,table_name    from    infomation_schema.tables    where    table_schema=database()    limit    0,1</p><p>用limit    0,1；limit    1,1;limit    2,1 这样来一个一个的显示表名</p><p>查字段名，例：</p><p>url    and    1=2    union    select    1,column_name    from    information_schema.columns    where        table_schema=database()    and    table_name=’刚刚查到的表名’    limit    0,1</p><p>这里也同样用limit    1,1    2,1来着查看字段名</p><br><p>遇到字符型传参，如id=1’1’</p><p>加上’%23或者’–+</p><p>其主要目的就是闭合单引号，当然也有可能别人用的是双引号，这个要自己尝试，因为他不会显示出来</p><p>出现小括号也是一样的，如id=(‘1’)</p><p>用’)来闭合它，再加上%23或者–+来闭合</p><br><p>最后，查到了我们想要的表名和字段名</p><p>union    select        1,字段名    from    表名</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/24/hello-word/"/>
      <url>/2020/07/24/hello-word/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
